
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author teffy
 */
public class TurtleAndHareGUI extends javax.swing.JFrame {

    ImageIcon turtleIcon;
    ImageIcon hareIcon;
    ImageIcon rtIcon;
    int initHare[]= new int[2];
    int initTurtle[]=new int[2];
    int initOuch;
    int c=0;
    Turtle turtle= new Turtle();
    Hare hare= new Hare();
    private Timer timer;
    
    /**
     * Creates new form TurtleAndHareGUI
     */
    public TurtleAndHareGUI() {
        initComponents();
        setImages();
        setLayout(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hareLabel = new javax.swing.JLabel();
        turtleLabel = new javax.swing.JLabel();
        raceLabel = new java.awt.Label();
        ouch = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        hareCounterLabel = new javax.swing.JLabel();
        turtleCounterLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        runningTrack = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hareLabel.setText("Hare");
        getContentPane().add(hareLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 100, 80));

        turtleLabel.setText("Turtle");
        getContentPane().add(turtleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 100, 80));

        raceLabel.setFont(new java.awt.Font("Impact", 0, 30)); // NOI18N
        raceLabel.setPreferredSize(new java.awt.Dimension(170, 40));
        raceLabel.setText("Final Marathon");
        getContentPane().add(raceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 60, 206, -1));

        ouch.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        ouch.setText("Ouch!");
        getContentPane().add(ouch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 62, 29));

        timeLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setText("Timer");
        getContentPane().add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 530, 230, 30));

        hareCounterLabel.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        hareCounterLabel.setText("0");
        getContentPane().add(hareCounterLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 380, 41, -1));

        turtleCounterLabel.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        turtleCounterLabel.setText("0");
        getContentPane().add(turtleCounterLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 420, 41, -1));

        startButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        startButton.setText("Start Race");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 490, -1, -1));

        runningTrack.setText("track");
        getContentPane().add(runningTrack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 114, 890, 380));
        runningTrack.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        DateTime t=new DateTime();
        t.setStartTime(); 
        refreshTimer();
    }//GEN-LAST:event_startButtonActionPerformed

    
    private void refreshTimer(){
        int delay = 100; //milliseconds
        DateTime time= new DateTime();
       //ActionListener taskPerformer = new ActionListener() {

        timer = new Timer(delay, new ActionListener() {
          public void actionPerformed(ActionEvent evt) {
             
              timeLabel.setText(time.deltaTime());
              c++;
              if(c==10){
                  c=0;
                  refreshMove();
                }
              
          }
            }); //me sobra el parÃ©ntesis

        //Timer t1=new Timer(delay, taskPerformer);
        timer.start();  
    }
    
    private void refreshMove(){
        turtle.move(Steps.randomNum());
        hare.move(Steps.randomNum());

        int turtleX=Turtle.getPositionTurtle();
        int hareX=Hare.getPositionHare();
        //Update counter labels
        turtleCounterLabel.setText(String.valueOf(turtleX));
        hareCounterLabel.setText(String.valueOf(hareX));
        //Update position of the hare and turtle 
        hareLabel.setLocation(hareX*800/70+initHare[0],initHare[1]);
        ouch.setLocation(hareX*800/70+initHare[0]+10,initOuch);
        turtleLabel.setLocation(turtleX*800/70+initTurtle[0],initTurtle[1]);
        positionCases(hareX, turtleX);

    }
    private void positionCases(int hareX, int turtleX){
        if (hareX>=70 ){
            timer.stop() ;
            displayWinner("Hare");
        }else if( turtleX>=70){
            timer.stop() ;
            displayWinner("Turtle");
        }
        else if (hareX==turtleX){
            ouch.setVisible(true);
        }else{
            ouch.setVisible(false);
        }
        
    }
    
    public void displayWinner(String winner){
        String msg=winner+" has won a bucket of carrots and lettuce!";
        Image veggies=(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("media/veggies.jpg")))).getImage();
        Image veggies2 = veggies.getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        ImageIcon icon=new ImageIcon(veggies2);
        System.out.println(msg);
        JOptionPane.showMessageDialog(null, msg, "Race result",JOptionPane.PLAIN_MESSAGE,icon);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TurtleAndHareGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TurtleAndHareGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TurtleAndHareGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TurtleAndHareGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TurtleAndHareGUI().setVisible(true);
            }
        });
        

    }
    private void setImages(){
        Image fullSizeTurtle= (new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("media/turtle.png")))).getImage();
        Image turtle=fullSizeTurtle.getScaledInstance(turtleLabel.getWidth(), turtleLabel.getHeight(), Image.SCALE_SMOOTH);
        turtleIcon=new ImageIcon(turtle);
        turtleLabel.setIcon(turtleIcon);
        
        Image fullSizeHare= (new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("media/hare.png")))).getImage();
        Image hare=fullSizeHare.getScaledInstance(hareLabel.getWidth(), hareLabel.getHeight(), Image.SCALE_SMOOTH);
        hareIcon=new ImageIcon(hare);
        hareLabel.setIcon(hareIcon);
        
        Image fullSizeRT= (new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("media/runningTrack.jpg")))).getImage();
        Image rt=fullSizeRT.getScaledInstance(runningTrack.getWidth(), runningTrack.getHeight(), Image.SCALE_SMOOTH);
        rtIcon=new ImageIcon(rt);
        runningTrack.setIcon(rtIcon);
        
        initHare[0]=hareLabel.getX();
        initHare[1]=hareLabel.getY();
        initTurtle[0]=turtleLabel.getX();
        initTurtle[1]=turtleLabel.getY();
        initOuch=ouch.getY();
        
        ouch.setVisible(false);
        
        
    }

        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hareCounterLabel;
    private javax.swing.JLabel hareLabel;
    private javax.swing.JLabel ouch;
    private java.awt.Label raceLabel;
    private javax.swing.JLabel runningTrack;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel turtleCounterLabel;
    private javax.swing.JLabel turtleLabel;
    // End of variables declaration//GEN-END:variables
}
